#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Функция для проверки, отправляет ли пользователь возраста A заявку пользователю возраста B
bool отправляет_заявку(int A, int B) {
    if (B <= 0.5 * A + 7) return false;      // Условие 1
    if (B > A) return false;                  // Условие 2
    if (B > 100 && A < 100) return false;     // Условие 3
    return true;                              // Иначе заявка отправляется
}

// Основная функция для подсчета общего количества заявок
int количествоЗаявок(vector<int>& возраста) {
    vector<int> частоты(121, 0);  // Массив частот (возраста от 1 до 120)
    for (int возраст : возраста) {
        if (возраст >= 1 && возраст <= 120) {
            частоты[возраст]++;
        }
    }

    int общее_количество = 0;

    // Перебираем все возможные пары возрастов A и B
    for (int A = 1; A <= 120; ++A) {
        for (int B = 1; B <= 120; ++B) {
            if (отправляет_заявку(A, B)) {
                if (A != B) {
                    общее_количество += частоты[A] * частоты[B];
                }
                else {
                    // Если A == B, то количество пар: количество_A * (количество_A - 1)
                    общее_количество += частоты[A] * (частоты[A] - 1);
                }
            }
        }
    }

    return общее_количество;
}

int main() {
    setlocale(LC_ALL, "Russian");  

    // Примеры из условия задачи
    vector<int> пример1 = { 16, 16 };
    cout << "Пример 1: " << количествоЗаявок(пример1) << endl;  // Ожидаем 2

    vector<int> пример2 = { 16, 17, 18 };
    cout << "Пример 2: " << количествоЗаявок(пример2) << endl;  // Ожидаем 2

    vector<int> пример3 = { 20, 30, 100, 110, 120 };
    cout << "Пример 3: " << количествоЗаявок(пример3) << endl;  // Ожидаем 3

    return 0;
}
